import streamlit as st
import numpy as np
import joblib
from pygam import LinearGAM

# Configurar la p√°gina con icono y t√≠tulo
st.set_page_config(page_title="Predicci√≥n de Producci√≥n de Az√∫car", page_icon="üçö")

# --- Cargar el modelo GAM entrenado ---
gam = joblib.load('modelo_GAM.pkl')

# --- Dise√±o de la interfaz ---
st.markdown(
    """
    <style>
        .main-container {
            background-color: #f4f4f4;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            margin: auto;
        }
        .stButton>button {
            background-color: #4CAF50;
            color: white;
            font-size: 18px;
            padding: 10px;
            border-radius: 10px;
        }
    </style>
    <div class='main-container'>
    """,
    unsafe_allow_html=True
)

# --- T√≠tulo e informaci√≥n ---
st.title("üìä Predicci√≥n de Producci√≥n de Az√∫car")

st.write("""
Este aplicativo permite predecir la producci√≥n de az√∫car a partir de tres variables clave:
- **Toneladas Ca√±a Molida (TCM)**
- **Rendimiento (kg/TCM)**
- **Toneladas de Jugo**

La predicci√≥n se realiza mediante un **Modelo Aditivo Generalizado (GAM)**, un enfoque de machine learning que permite capturar relaciones no lineales entre las variables de entrada y la producci√≥n de az√∫car. Este modelo ha sido entrenado con datos hist√≥ricos del Ingenio Azucarero Monterrey C.A. y proporciona estimaciones basadas en patrones observados en la producci√≥n diaria.
""")

st.write("""
Este aplicativo es √∫til para los profesionales e ingenieros azucareros de la empresa, ya que les permite obtener estimaciones de producci√≥n de manera r√°pida y basada en datos, facilitando la planificaci√≥n y gesti√≥n operativa.
""")

# --- Entradas del usuario ---
tcm = st.number_input("Ingrese TCM (Toneladas Ca√±a Molida):", min_value=0.0, format="%.2f")
rendimiento = st.number_input("Ingrese Rendimiento (kg/TCM):", min_value=0.0, format="%.2f")
toneladas_jugo = st.number_input("Ingrese Toneladas de Jugo:", min_value=0.0, format="%.2f")

# --- Validaci√≥n y predicci√≥n ---
if st.button("Predecir Producci√≥n"):
    if tcm == 0.0 or rendimiento == 0.0 or toneladas_jugo == 0.0:
        st.warning("‚ö†Ô∏è Por favor, ingrese valores mayores a 0 en todos los campos.")
    else:
        X_nuevo = np.array([[tcm, rendimiento, toneladas_jugo]])
        y_pred_log = gam.predict(X_nuevo)
        y_pred = np.expm1(y_pred_log)  # Inversi√≥n de la transformaci√≥n logar√≠tmica
        st.success(f"‚ö° Predicci√≥n de Producci√≥n: {y_pred[0]:,.2f} sacos")

# Cierre del dise√±o
st.markdown("</div>", unsafe_allow_html=True)
